#!/usr/bin/env node
var fs = require('fs'),
    rc = require('rc'),
    ini = require('ini'),
    extend = require('gextend'),
    join = require('path').join,
    pkg = require('../package.json'),
    updateNotifier = require('update-notifier');

updateNotifier({pkg: pkg}).notify();

/****************************************
* LOAD CONFIG
****************************************/
var config = rc('envset', {
    filename: './.envset',
    exportEnvironment: 'NODE_ENV',
    environments: {
        names: ['development', 'production', 'staging', 'test', 'local']
    }
});

/****************************************
* GET ENV NAME AND COMMAND
****************************************/
var argv = process.argv.concat();

//Show help:
if(argv.length === 2){
    console.log('');
    console.log('envset: Load environment variables in session before');
    console.log('        executing your program.');
    console.log('');
    console.log('Accepted environment names are:');
    config.environments.names.map(function(name){
        console.log(' - ', name);
    });
    console.log('');
    console.log('You might want to add your ".envset" file to ".gitignore"');
    console.log('');
    console.log('version:', pkg.version);
    console.log('');
    process.exit(0);
}

var envName = argv[2];
var dash = argv[3] === '--' ? 1 : 0;
var cmd = argv[3 + dash];
var args = argv.splice(4 + dash);


/****************************************
* LOAD ENVIRONMENT
****************************************/
var envs = ini.parse(fs.readFileSync(config.filename, 'utf-8'));

//extract global ENVS from envs.ini
var globals = Object.keys(envs).reduce(function(out, key){
    if(config.environments.names.indexOf(key) !== -1) return out;
    out[key] = envs[key];
    delete envs[key];
    return out;
}, {});

//If it's not a supported environment exit
if(config.environments.names.indexOf(envName) === -1 ||
   !envs.hasOwnProperty(envName)){
    console.error('envset error: Unrecognized environment "%s"', envName);
    console.error('');
    console.error('Update your file to include your environment');
    console.error('');
    console.error('Your current environments are:')
    Object.keys(envs).map(function(name){
        console.log(' - ', name);
    });
    console.error('');
    console.log('version:', pkg.version);
    console.log('');
    process.exit(1);
}

//TODO: Make plugins for this func.
//We create an environmental variable holding the current
//environment name, ie NODE_ENV=development
var exportEnvironment = config.exportEnvironment;
if(globals.hasOwnProperty('exportEnvironment')){
    exportEnvironment = globals['exportEnvironment'];
}

envs[envName][exportEnvironment] = envName;


/****************************************
* EXTEND ENVIRONMENT
****************************************/
var _env = extend({}, process.env, globals, envs[envName]);


if(!cmd){
    //We do not have command, export to cli
    Object.keys(_env).map(function(name){
        console.log(name, '=', _env[name]);
    });
    return
}

/****************************************
* Register global error handler
****************************************/
process.on('uncaughtException', function(e){
    console.log('Uncaught Exception:', e.message);
    errorMessage(e);
});

/****************************************
* EXECUTE ORIGINAL COMMAND
****************************************/
var exec = require('child_process').spawn;
var child = exec(cmd, args, {
    // detached: true,
    stdio: 'inherit',
    env: _env
});

child.on('error', function (err) {
    errorMessage(err);
});

function errorMessage(err){
    console.error('envset failed to execute provided command.');
    console.error('Ensure the following is a valid command.');
    console.error('%s %s', cmd, args.join(' '));
    console.error(err);
}
